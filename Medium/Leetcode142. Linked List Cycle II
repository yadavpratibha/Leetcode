/**
 * Problem: 142. Linked List Cycle II
 * Source: https://leetcode.com/problems/linked-list-cycle-ii/description/
 */

/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode detectCycle(ListNode head) {
        ListNode meetup=hasCycle(head);
        if(meetup==null){
            return null;
        }
        ListNode A=meetup;
        ListNode B=head;
        while(A!=B){
            A=A.next;
            B=B.next;
        }
        return A;
    }

    public ListNode hasCycle(ListNode head){
        ListNode slow=head;
        ListNode fast=head;

        while(fast!=null && fast.next!=null){
            slow=slow.next;
            fast=fast.next.next;
            if(slow==fast){
                return slow;
            }
        }
        return null;
    }
}
