/**
 * Problem: 23. Merge k Sorted Lists
 * Source: https://leetcode.com/problems/merge-k-sorted-lists/description/
 */

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        if(lists==null || lists.length==0){
            return null;
        }
        return mergeKListsHelper(lists,0,lists.length-1);

    }

    private ListNode mergeKListsHelper(ListNode[] lists, int left, int right) {
        if (left == right) {
            return lists[left];
        }

        int mid = left + (right - left) / 2;
        ListNode l1 = mergeKListsHelper(lists, left, mid);
        ListNode l2 = mergeKListsHelper(lists, mid + 1, right);

        return mergeTwoSortedList(l1, l2);
    }

    public ListNode mergeTwoSortedList(ListNode head1, ListNode head2){
        ListNode dummy=new ListNode(0);
        ListNode temp=dummy;

        ListNode list1=head1;
        ListNode list2=head2;

        while(list1!=null && list2!=null){
            if(list1.val<list2.val){
                dummy.next=list1;
                list1=list1.next;
            }else{
                dummy.next=list2;
                list2=list2.next;
            }
            dummy=dummy.next;
        }

        if(list1!=null){
            dummy.next=list1;
        }
        if(list2!=null){
            dummy.next=list2;
        }
        return temp.next;
    }
}
